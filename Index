<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Terschelling Occupancy Plan</title>
  <!-- Tailwind CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 text-gray-900">
  <div id="root"></div>

  <!-- React 18 + ReactDOM -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <!-- Babel Standalone -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <script type="text/babel">
    const { useEffect, useMemo, useState } = React;

    const STATUSES = ["", "Free", "Occupied", "Optional"];
    const STATUS_COLOR = {
      "": "",
      Free: "bg-green-100 text-green-900",
      Occupied: "bg-red-100 text-red-900",
      Optional: "bg-yellow-100 text-yellow-900",
    };

    const LS_KEY = "terschelling-occupancy-v1";

    function pad(n, w = 2) { return String(n).padStart(w, "0"); }

    function isoWeekMonday(year, week) {
      const simple = new Date(Date.UTC(year, 0, 4));
      const dayOfWeek = simple.getUTCDay() || 7;
      const thursday = new Date(simple);
      thursday.setUTCDate(simple.getUTCDate() + (4 - dayOfWeek));
      const monday = new Date(thursday);
      monday.setUTCDate(thursday.getUTCDate() - 3 + (week - 1) * 7);
      monday.setUTCHours(0,0,0,0);
      return monday;
    }
    function addDaysUTC(d, days) { const x = new Date(d); x.setUTCDate(d.getUTCDate()+days); return x; }
    function formatRange(mon, sun) {
      const months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
      return `${months[mon.getUTCMonth()]} ${pad(mon.getUTCDate())}–${months[sun.getUTCMonth()]} ${pad(sun.getUTCDate())}`;
    }
    function weeksOfYear(year) {
      const weeks=[]; for (let wk=1;wk<=53;wk++){ try {
        const monday=isoWeekMonday(year,wk);
        if (monday.getUTCFullYear()!==year) continue;
        const sunday=addDaysUTC(monday,6);
        weeks.push({wk,monday,sunday,label:`Wk ${wk} (${formatRange(monday,sunday)})`});
      } catch(e){} }
      return weeks;
    }

    function encodeData(obj){ try { return encodeURIComponent(JSON.stringify(obj)); } catch(e){ return ""; } }
    function decodeData(s){ try { return JSON.parse(decodeURIComponent(s||"")); } catch(e){ return null; } }

    function App(){
      const thisYear=new Date().getFullYear();
      const [year,setYear]=useState(thisYear);
      const [cabins,setCabins]=useState(["Bunk","Double","Cabin 3","Cabin 4","Cabin 5","Cabin 6"]);
      const [plan,setPlan]=useState({});
      const [readOnly,setReadOnly]=useState(false);

      useEffect(()=>{
        const hash=window.location.hash.replace(/^#/,"");
        if(hash){ const decoded=decodeData(hash); if(decoded&&decoded.plan){ setPlan(decoded.plan); setCabins(decoded.cabins); setYear(decoded.year); setReadOnly(!!decoded.readOnly); return; } }
        const fromLS=localStorage.getItem(LS_KEY);
        if(fromLS){ try{ const obj=JSON.parse(fromLS); setPlan(obj.plan||{}); setCabins(obj.cabins||cabins); setYear(obj.year||year);}catch{} }
      },[]);
      useEffect(()=>{ localStorage.setItem(LS_KEY,JSON.stringify({plan,cabins,year})); },[plan,cabins,year]);

      const weeks=useMemo(()=>weeksOfYear(year),[year]);

      function setWeekStatus(wk,status){ setPlan(prev=>{const y={...(prev[year]||{})}; const we={...(y[wk]||{cabins:{}})}; we._all=status; y[wk]=we; return {...prev,[year]:y}; }); }
      function setCabinStatus(wk,c,status){ setPlan(prev=>{const y={...(prev[year]||{})}; const we={...(y[wk]||{cabins:{}})}; const cs={...(we.cabins||{})}; cs[c]=status; we.cabins=cs; y[wk]=we; return {...prev,[year]:y}; }); }
      function getCabinStatus(wk,c){ const we=plan?.[year]?.[wk]; const explicit=we?.cabins?.[c]; if(explicit&&explicit!=="") return explicit; return we?._all||""; }

      function exportJSON(){ const blob=new Blob([JSON.stringify({plan,cabins},null,2)],{type:"application/json"}); const url=URL.createObjectURL(blob); const a=document.createElement("a"); a.href=url;a.download=`terschelling-occupancy-${year}.json`;a.click();URL.revokeObjectURL(url); }
      function importJSON(e){ const f=e.target.files?.[0]; if(!f)return; const r=new FileReader(); r.onload=(ev)=>{try{const obj=JSON.parse(ev.target.result); if(obj.cabins) setCabins(obj.cabins); if(obj.plan) setPlan(obj.plan);}catch{alert("Invalid JSON");}}; r.readAsText(f); }
      function genShareLink({readonly}){ const enc=encodeData({plan,cabins,year,readOnly:!!readonly}); const share=`${window.location.origin}${window.location.pathname}#${enc}`; navigator.clipboard?.writeText(share); alert("Share link copied!\\n\\n"+share); }

      return <div className="max-w-[1400px] mx-auto p-6">
        <h1 className="text-2xl font-bold mb-2">Terschelling Occupancy Plan</h1>
        <div className="flex flex-wrap gap-2 mb-4">
          <button onClick={()=>genShareLink({readonly:false})} className="bg-black text-white rounded px-3 py-2 text-sm">Share (editable)</button>
          <button onClick={()=>genShareLink({readonly:true})} className="bg-gray-800 text-white rounded px-3 py-2 text-sm">Share (read-only)</button>
        </div>
        <div className="overflow-auto rounded-2xl border bg-white shadow-sm">
          <table className="min-w-full border-collapse">
            <thead className="bg-gray-100 sticky top-0 z-10">
              <tr>
                <th className="p-3 text-left text-xs font-semibold text-gray-600 w-48 sticky left-0 bg-gray-100 border-r">Cabin</th>
                {weeks.map(w=><th key={w.wk} className="p-2 text-[11px] font-semibold text-gray-700 text-center min-w-[140px] border-l">{w.label}</th>)}
              </tr>
              <tr>
                <th className="p-2 text-xs text-gray-600 sticky left-0 bg-white border-t border-r">All cabins (week)</th>
                {weeks.map(w=><th key={"all-"+w.wk} className="p-1 border-t"><select className="w-full border rounded px-2 py-1 text-xs" value={plan?.[year]?.[w.wk]?._all||""} onChange={e=>setWeekStatus(w.wk,e.target.value)} disabled={readOnly}>{STATUSES.map(s=><option key={s} value={s}>{s||"—"}</option>)}</select></th>)}
              </tr>
            </thead>
            <tbody>
              {cabins.map(c=><tr key={c} className="even:bg-gray-50"><td className="p-2 text-sm font-medium sticky left-0 bg-white border-r">{c}</td>{weeks.map(w=>{const val=getCabinStatus(w.wk,c);return <td key={c+"-"+w.wk} className="p-1 border-t"><select className={"w-full border rounded px-2 py-1 text-xs "+(STATUS_COLOR[val]||"")} value={val} onChange={e=>setCabinStatus(w.wk,c,e.target.value)} disabled={readOnly}>{STATUSES.map(s=><option key={s} value={s}>{s}</option>)}</select></td>;})}</tr>)}
            </tbody>
          </table>
        </div>
      </div>;
    }

    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(<App/>);
  </script>
</body>
</html>
